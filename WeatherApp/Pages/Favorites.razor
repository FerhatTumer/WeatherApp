@page "/favorites"
@using MediatR
@using WeatherApp.Application.Commands
@using WeatherApp.Application.DTOs
@using WeatherApp.Application.Queries
@using WeatherApp.Application.Services
@using WeatherApp.Application.Services.Interfaces
@inject IMediator Mediator
@inject IFavoriteCityService FavoriteCityService

<h3>Add Favorite Cities</h3>
<div>
    <input @bind="NewCities" placeholder="Enter city names (comma-separated)..." class="form-control" />
    <button @onclick="AddCities" class="btn btn-primary mt-2">Add</button>
</div>

@if (FavoriteCities.Any())
{
    <h4 class="mt-4">Favorite Cities</h4>
    <ul>
        @foreach (var city in FavoriteCities)
        {
            <li>
                <b>@city.CityName:</b> Temperature: @city.Temperature °C, Condition: @city.Condition
                <button @onclick="() => RemoveCity(city.Id)" class="btn btn-danger btn-sm">Remove</button>
            </li>
        }
    </ul>
}

@code {
    private string NewCities = string.Empty;
    private List<WeatherCityViewModel> FavoriteCities = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadFavoriteCities();
    }

    private async Task AddCities()
    {
        var cities = NewCities.Split(',', StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries);
        foreach (var city in cities)
        {
            var command = new AddFavoriteCityCommand(city);
            await Mediator.Send(command);
        }

        await LoadFavoriteCities();
        NewCities = string.Empty;
    }

    private async Task RemoveCity(Guid cityId)
    {
        var command = new DeleteFavoriteCityCommand(cityId);
        await Mediator.Send(command);
        await LoadFavoriteCities();
    }

    private async Task LoadFavoriteCities()
    {
        var query = new GetAllFavoriteCitiesQuery();
        var cities = await Mediator.Send(query);
        var cityNames = cities.Select(c => c.CityName);
        var weatherInfos = await FavoriteCityService.GetWeatherForCitiesAsync(cityNames);

        FavoriteCities = cities.Select(c => new WeatherCityViewModel
            {
                Id = c.Id,
                CityName = c.CityName,
                Temperature = weatherInfos.FirstOrDefault(w => w.City == c.CityName)?.Temperature ?? 0,
                Condition = weatherInfos.FirstOrDefault(w => w.City == c.CityName)?.Condition ?? "N/A"
            }).ToList();
    }

    public class WeatherCityViewModel
    {
        public Guid Id { get; set; }
        public string CityName { get; set; }
        public double Temperature { get; set; }
        public string Condition { get; set; } = string.Empty;
    }
}
