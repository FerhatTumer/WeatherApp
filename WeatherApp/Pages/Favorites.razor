@page "/favorites"
@using MediatR
@using WeatherApp.Application.Commands
@using WeatherApp.Application.DTOs
@using WeatherApp.Application.Queries
@using WeatherApp.Application.Services
@using WeatherApp.Application.Services.Interfaces
@inject IMediator Mediator
@inject IFavoriteCityService FavoriteCityService

<h3>Add Favorite City</h3>
<div>
    <input @bind="NewCity" placeholder="Enter city name..." class="form-control" />
    <button @onclick="AddCity" class="btn btn-primary mt-2" disabled="@IsLoading">Add</button>
</div>

@if (IsLoading)
{
    <p class="mt-4">Loading favorite cities...</p>
}
else if (FavoriteCities.Any())
{
    <h4 class="mt-4">Favorite Cities</h4>
    <ul>
        @foreach (var city in FavoriteCities)
        {
            <li>
                <b>@city.CityName:</b> Temperature: @city.Temperature °C, Condition: @city.Condition
                <button @onclick="() => RemoveCity(city.Id)" class="btn btn-danger btn-sm">Remove</button>
            </li>
        }
    </ul>

    <h4 class="mt-4">Summary</h4>
    <p><b>Hottest City:</b> @Summary.HottestCity?.City (@Summary.HottestCity?.Temperature ?? 0 °C)</p>
    <p><b>Coldest City:</b> @Summary.ColdestCity?.City (@Summary.ColdestCity?.Temperature ?? 0 °C)</p>
    <p><b>Average Temperature:</b> @Summary.AverageTemperature °C</p>
}
else
{
    <p class="mt-4">No favorite cities added yet.</p>
}

@code {
    private string NewCity = string.Empty;
    private List<WeatherCityViewModel> FavoriteCities = new();
    private FavoriteCitySummary? Summary;
    private bool IsLoading = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadFavoriteCities();
    }

    private async Task AddCity()
    {
        try
        {
            IsLoading = true;
            var command = new AddFavoriteCityCommand(NewCity);

            await Mediator.Send(command);
            await LoadFavoriteCities();
            NewCity = string.Empty;
        }
        finally
        {
            IsLoading = false;
        }
    }

    private async Task RemoveCity(Guid cityId)
    {
        try
        {
            IsLoading = true;
            var command = new DeleteFavoriteCityCommand(cityId);
            await Mediator.Send(command);
            await LoadFavoriteCities();
        }
        finally
        {
            IsLoading = false;
        }
    }

    private async Task LoadFavoriteCities()
    {
        try
        {
            IsLoading = true;

            // Favori şehirleri ve hava durumu verilerini yükle
            var query = new GetAllFavoriteCitiesQuery();
            var cities = await Mediator.Send(query);

            if (cities == null || !cities.Any())
            {
                FavoriteCities.Clear();
                Summary = null;
                return;
            }

            var cityNames = cities.Select(c => c.CityName);
            var weatherInfos = await FavoriteCityService.GetWeatherForCitiesAsync(cityNames);

            // Şehirleri tek bir sorguyla eşleştir
            var weatherInfoDict = weatherInfos.ToDictionary(w => w.City, w => w);

            FavoriteCities = cities
                .Select(c => new WeatherCityViewModel
                    {
                        Id = c.Id,
                        CityName = c.CityName,
                        Temperature = weatherInfoDict.TryGetValue(c.CityName, out var info) ? info.Temperature : 0,
                        Condition = weatherInfoDict.TryGetValue(c.CityName, out var info2) ? info2.Condition : "N/A"
                    })
                .ToList();

            // Özet bilgilerini hesapla
            var hottestCity = weatherInfos.OrderByDescending(w => w.Temperature).FirstOrDefault();
            var coldestCity = weatherInfos.OrderBy(w => w.Temperature).FirstOrDefault();
            var averageTemperature = weatherInfos.Any() ? weatherInfos.Average(w => w.Temperature) : 0;

            Summary = new FavoriteCitySummary
                {
                    HottestCity = hottestCity,
                    ColdestCity = coldestCity,
                    AverageTemperature = averageTemperature
                };
        }
        finally
        {
            IsLoading = false;
        }
    }

    public class WeatherCityViewModel
    {
        public Guid Id { get; set; }
        public string CityName { get; set; }
        public double Temperature { get; set; }
        public string Condition { get; set; } = string.Empty;
    }
}
